createdAt: "2020-12-21T01:44:26.778Z"
updatedAt: "2020-12-21T15:22:52.738Z"
type: "MARKDOWN_NOTE"
folder: "7aeedd67bc6c0a7b9661"
title: "责任链"
tags: []
content: '''
  # 责任链
  
  ## 作用
  
  一个请求需要经过多个对象处理，为了将发送者与多个处理者之间解耦，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。
  
  优点：
  - 发送者与多个处理者之间解耦
  - 扩展性强，可以方便的扩展多种处理者，符合开闭原则
  - 灵活性，可动态增删处理者，或者调整处理者顺序
  - 符合类的单一职责原则
  
  缺点：
  职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用
  
  ![ChainOfResponsibility 模式](https://gitee.com/binggouxsm/JAVA-Reference/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pics/ChainOfResponsibility.png)
  
  ## 实现
  
  ```java
  
  public abstract class Handler {
  
      protected Handler next;
  
      public Handler getNext() {
          return next;
      }
  
      public void setNext(Handler next) {
          this.next = next;
      }
  
      public void handleRequest(StringBuffer sb){
          handleRequestInternal(sb);
          if(next != null){
              next.handleRequest(sb);
          }
      }
  
      public abstract void handleRequestInternal(StringBuffer sb);
  }
  
  public class ConcreteHandler1 extends Handler {
      public void handleRequestInternal(StringBuffer sb) {
          sb.append("ConcreteHandler1 processed\\n");
      }
  }
  
  public class ConcreteHandler2 extends Handler {
      public void handleRequestInternal(StringBuffer sb) {
          sb.append("ConcreteHandler2 processed\\n");
      }
  }
  
  public class Main {
      public static void main(String[] args) {
          Handler handler1 = new ConcreteHandler1();
          Handler handler2 = new ConcreteHandler2();
          handler1.setNext(handler2);
  
          StringBuffer sb = new StringBuffer();
          handler1.handleRequest(sb);
          System.out.println(sb.toString());
      }
  }
  ```
  
  ## FilterChain
  
  责任链设计模式应用中最常见的为servlet-api.jar包中的FilterChain。在Web程序中可以注册多个Filter，对请求和响应进行拦截处理，多个Filter组成一个Filter调用链。
  
  ![Filter 调用链](https://gitee.com/binggouxsm/JAVA-Reference/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pics/Fliter_Invocation.png)
  
  尝试自己手写FilterChain，实现添加Filter对请求和拦截进行响应处理
  
  简化Request,Response模型，里面就包含一个StringBuffer内容，后续往里面添加内容
  
  ```java
  public class Request {
      public StringBuffer content = new StringBuffer();
  }
  public class Response {
      public StringBuffer content = new StringBuffer();
  }
  ```
  
  
  ```java
  public interface Filter {
      public void doFilter(Request request,Response response, FilterChain chain);
  }
  
  public interface FilterChain {
      public void addFilter(Filter filter);
      public void doFilter(Request request, Response response);
  }
  
  public abstract class AbstractFilter implements Filter{
      public void doFilter(Request request, Response response, FilterChain chain) {
          doFilterRequestInternal(request,response);
          chain.doFilter(request,response);
          doFilterResponseInternal(request,response);
      }
      // 处理请求的业务逻辑
      protected abstract void doFilterRequestInternal(Request request, Response response);
      // 处理响应的业务逻辑
      protected abstract void doFilterResponseInternal(Request request, Response response);
  }
  
  public class DefaultFilterChain implements FilterChain {
      private List<Filter> filters;
      private int pos;
      public DefaultFilterChain(){
          filters = new ArrayList<>();
          pos = 0;
      }
  
      public void addFilter(Filter filter) {
          filters.add(filter);
      }
  
      public void doFilter(Request request, Response response) {
          if (pos < filters.size()){
              Filter filter = filters.get(pos);
              pos++;
              filter.doFilter(request,response,this);
          }
      }
  }
  ```
  ![FilterChain](https://gitee.com/binggouxsm/JAVA-Reference/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pics/FilterChain.png)
  
  ### FilterChain 测试
  
  #### 测试1：正常流程
  
  Filter具体实现类继承AbstractFilter，根据情况去选择性实现doFilterRequestInternal或doFilterResponseInternal抽象方法
  ```java
  public class FilterOne extends AbstractFilter {
      protected void doFilterRequestInternal(Request request, Response response) {
          request.content.append("Filter One proceeded request\\n");
      }
  
      protected void doFilterResponseInternal(Request request, Response response) {
      }
  }
  
  public class FilterTwo extends AbstractFilter {
      protected void doFilterRequestInternal(Request request, Response response) {
          request.content.append("Filter Two proceeded request\\n");
      }
  
      protected void doFilterResponseInternal(Request request, Response response) {
          response.content.append("Filter Two proceeded response\\n");
      }
  }
  
  public class FilterThree extends AbstractFilter {
      protected void doFilterRequestInternal(Request request, Response response) {
  
      }
  
      protected void doFilterResponseInternal(Request request, Response response) {
          response.content.append("Filter Three proceeded response\\n");
      }
  }
  ```
  
  测试类：
  ```java
  public class Main {
      public static void main(String[] args) {
  
          Request req = new Request();
          Response res = new Response();
  
          DefaultFilterChain chain = new DefaultFilterChain();
          chain.addFilter(new FilterOne());
          chain.addFilter(new FilterTwo());
          chain.addFilter(new FilterThree());
  
          try {
              chain.doFilter(req,res);
          }catch (Exception e){
          }
  
          System.out.println(req.content.toString());
          System.out.println("===========================");
          System.out.println(res.content.toString());
          System.out.println("===========================");
      }
  }
  ```
  
  结果：
  
  ```java
  Filter One proceeded request
  Filter Two proceeded request
  ===========================
  Filter Three proceeded response
  Filter Two proceeded response
  ===========================
  ```
  
  #### 测试2：请求过程中异常抛错
  
  ```java
  public class FilterTwoErr extends AbstractFilter {
      @Override
      protected void doFilterRequestInternal(Request request, Response response) {
          request.content.append("Filter Two proceeded request error, rollback\\n");
          int a = 1/0;
      }
  
      protected void doFilterResponseInternal(Request request, Response response) {
          response.content.append("Filter Two proceeded response\\n");
      }
  }
  
  public class Main {
      public static void main(String[] args) {
  
          Request req = new Request();
          Response res = new Response();
  
          DefaultFilterChain chain = new DefaultFilterChain();
          chain.addFilter(new FilterOne());
          chain.addFilter(new FilterTwoErr());
          chain.addFilter(new FilterThree());
  
          try {
              chain.doFilter(req,res);
          }catch (Exception e){
          }
  
          System.out.println(req.content.toString());
          System.out.println("===========================");
          System.out.println(res.content.toString());
          System.out.println("===========================");
      }
  }
  
  ```
  
  结果：chain.doFilter 能在错误点中断，不继续调用后续Filter，同时正常抛出相关错误
  
  ```java
  Filter One proceeded request
  Filter Two proceeded request error, rollback
  
  ===========================
  
  ===========================
  ```
  #### 测试3：响应过程中异常抛错
  
  ```java
  public class FilterThreeResErr extends AbstractFilter {
      @Override
      protected void doFilterRequestInternal(Request request, Response response) {
          request.content.append("Filter Three proceeded request\\n");
      }
  
      @Override
      protected void doFilterResponseInternal(Request request, Response response) {
          response.content.append("Filter Three proceeded response error rollback\\n");
          int a = 1/0;
      }
  }
  
  public class Main {
      public static void main(String[] args) {
  
          Request req = new Request();
          Response res = new Response();
  
          DefaultFilterChain chain = new DefaultFilterChain();
          chain.addFilter(new FilterOne());
          chain.addFilter(new FilterTwo());
          chain.addFilter(new FilterThreeResErr());
  
          try {
              chain.doFilter(req,res);
          }catch (Exception e){
          }
  
          System.out.println(req.content.toString());
          System.out.println("===========================");
          System.out.println(res.content.toString());
          System.out.println("===========================");
      }
  }
  ```
  
  结果：chain.doFilter 能在错误点中断，不继续调用后续Filter，同时正常抛出相关错误
  
  ```java
  Filter One proceeded request
  Filter Two proceeded request
  Filter Three proceeded request
  
  ===========================
  Filter Three proceeded response error rollback
  
  ===========================
  ```
  
  
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
