createdAt: "2020-12-12T14:32:21.627Z"
updatedAt: "2020-12-20T03:09:57.573Z"
type: "MARKDOWN_NOTE"
folder: "7aeedd67bc6c0a7b9661"
title: "Facade"
tags: [
  "设计模式"
  "门面"
]
content: '''
  # Facade
  
  ## 作用
  
  为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问
  
  ![Facade 模式](https://gitee.com/binggouxsm/JAVA-Reference/raw/master/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pics/Facade.png)
  
  优点：
  - 降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。
  - 对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。
  - 降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。
  
  缺点：
  - 不能很好地限制客户使用子系统类，很容易带来未知风险。
  - 增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。
  
  ## 实现
  
  ```java
  public class SubSystem01 {
      public void method01(){
          System.out.println("SubSystem01 calling method01");
      }
  }
  public class SubSystem02 {
      public void method02(){
          System.out.println("SubSystem02 calling method02");
      }
  }
  public class SubSystem03 {
      public void method03(){
          System.out.println("SubSystem03 calling method03");
      }
  }
  
  public class Facade {
      private SubSystem01 sub01 = new SubSystem01();
      private SubSystem02 sub02 = new SubSystem02();
      private SubSystem03 sub03 = new SubSystem03();
  
      public void method(){
          sub01.method01();
          sub02.method02();
          sub03.method03();
      }
  }
  
  public class Main {
      public static void main(String[] args) {
          Facade facade = new Facade();
          facade.method();
      }
  }
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
