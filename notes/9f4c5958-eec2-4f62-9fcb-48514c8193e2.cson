createdAt: "2020-12-28T08:48:36.424Z"
updatedAt: "2021-01-11T11:33:21.413Z"
type: "MARKDOWN_NOTE"
folder: "519177323b9b1554eb7a"
title: "反射"
tags: [
  "反射"
]
content: '''
  # 反射
  
  ## 基础概念
  
  Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；
  
  ## 代码结构
  
  ![反射类关系](https://gitee.com/binggouxsm/JAVA-Reference/raw/master/JAVA%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/pics/Reflection_Member.png)
  
  
  遗留问题：ReflectionData类中为啥保留两个缓存变量declaredPublicFields和publicFields，而Class类中获取所有public字段只有 getFields一个方法??
  求大佬解释
  
  
  ## 具体功能
  
  基础代码：
  
  ```java
  public interface Flyable {
      public void fly();
      public void fly(int speed);
  }
  
  @Retention(RetentionPolicy.RUNTIME)
  @Target(ElementType.FIELD)
  public @interface MyFieldAnnotation {
  }
  
  @Retention(RetentionPolicy.RUNTIME)
  @Target(ElementType.METHOD)
  public @interface MyMethodAnnotation {
      int sort() default 0;
      String value();
      String[] request();
  }
  
  public class Bird implements Flyable{
      private String category;
      private int age;
      @MyFieldAnnotation
      public String name;
      protected List<String> nickname;
      public Bird() {
      }
      public Bird(String category, int age) {
          this.category = category;
          this.age = age;
      }
      public String getCategory() {
          return category;
      }
      public void setCategory(String category) {
          this.category = category;
      }
      public int getAge() {
          return age;
      }
      public void setAge(int age) {
          this.age = age;
      }
      @MyMethodAnnotation(value = "aaa", request = {"asd","bbbb"})
      public void fly() {
          sing();
          System.out.println("Bird fly");
      }
      public void fly(int speed) {
          sing();
          System.out.println("Bird fly at"+speed);
      }
      private void sing(){
          System.out.println("Bird singing");
      }
      protected void growOld(){
          this.age++;
      }
      public List<String> getNickname() {
          return nickname;
      }
      public void setNickname(List<String> nickname) {
          this.nickname = nickname;
      }
      public void setNicknameVarArg(String... nicknames){
          this.nickname = Arrays.asList(nicknames);
      }
  }
  
  public class Swallow extends Bird {
  }
  ```
  
  ###  获取Class对象
  
  ```java
  // 对象实例，调用object.getClass()
  Class cl10 = new Bird().getClass();
  System.out.println(cl10.toString());
  
  Bird[] arr10 = new Bird[10];
  System.out.println(arr10.getClass());// 运行结果为 class [Lcom.eden.javalearning.reflection.Bird;
  
  double[] darr = new double[10];
  System.out.println(darr.getClass());// 运行结果为 class [D
  
  // 通过类的类型获取Class对象
  System.out.println(int.class.toString());
  System.out.println(Bird.class.toString());
  
  // 通过类的全限定名获取Class对象，基础类型无法使用此方法
  System.out.println(Class.forName("com.eden.javalearning.reflection.Swallow"));
  // 通过调用反射的相关方法获取Class对象
  System.out.println(Swallow.class.getSuperclass().toString());
  
  ```
  
  ###  访问Field对象
  
  打印Field信息
  
  ```java
  Class clazz = Bird.class;
  // 获取所有的public变量
  Field[] fields = clazz.getFields();
  
  // 获取所有声明的变量（包括private）
  Field[] declaredFields = clazz.getDeclaredFields();
  
  for(Field field : declaredFields){
      StringBuffer sb = new StringBuffer();
      sb.append(" modifier : "+ Modifier.toString(field.getModifiers()));
      sb.append(" type = " + field.getType());
      sb.append(" Generic type = " + field.getGenericType().getTypeName());
  
      sb.append(" field name = " + field.getName());
      Annotation[] ann = field.getAnnotations();
  
      if(ann.length >0){
          sb.append(" annotation = ");
          for(Annotation a: ann){
              sb.append(a.annotationType().getName());
              sb.append(" , ");
          }
      }
      System.out.println(sb.toString());
  }
  ```
  
  设置和访问Field值
  
  
  ```java
  Bird swallow = new Bird("swallow", 1);
  Class clazz = swallow.getClass();
  Field fieldAge = clazz.getDeclaredField("age");
  // 访问私有变量，需设置Accessible
  fieldAge.setAccessible(true);
  System.out.println(fieldAge.getInt(swallow));
  fieldAge.setInt(swallow,3);
  System.out.println(swallow.getAge());
  
  
  Field fieldCat = clazz.getDeclaredField("category");
  fieldCat.setAccessible(true);
  System.out.println(fieldCat.get(swallow));
  // 故意设置类型不同的值，返回报错IllegalArgumentException
  fieldCat.set(swallow,new ArrayList<>());
  ```
  
  ### 访问Method和Constructor对象
  
  打印Constructor信息
  
  ```java
  Class clazz = Bird.class;
  Constructor[] constructors = clazz.getConstructors();
  for (Constructor constructor : constructors){
      StringBuffer sb = new StringBuffer();
      sb.append(" modifiers "+ Modifier.toString(constructor.getModifiers()));
      sb.append(" name "+ constructor.getName());
  
      Parameter[] parameters = constructor.getParameters();
      sb.append(parameterprint(parameters));
      System.out.println(sb.toString());
  
  }
  
  
  private static StringBuffer parameterprint(Parameter[] parameters){
      StringBuffer sb = new StringBuffer();
      for (int i = 0; i < parameters.length; i++) {
          sb.append(" parameter["+ i +"]: ");
          sb.append(parameters[i].getType()+" ");
          //获取参数名称，如果编译时未加上`-parameters`，返回的名称形如`argX`, X为参数在方法声明中的位置，从0开始
          sb.append(parameters[i].getName()+" ");
          // 判断是否为可变参数
          sb.append(parameters[i].isVarArgs()+" ");
  
      }
      return sb;
  }
  ```
  
  打印Method 信息
  
  ```java
  Class clazz = Bird.class;
  Method[] declaredMethods = clazz.getDeclaredMethods();
  
  for (Method method: declaredMethods){
      StringBuffer sb = new StringBuffer();
      sb.append(" modifiers "+ Modifier.toString(method.getModifiers()));
  
      sb.append(" returnType "+ method.getReturnType().toString());
      sb.append(" GenericReturnType "+ method.getGenericReturnType());
  
      sb.append(" name "+ method.getName());
  
      Parameter[] parameters = method.getParameters();
      sb.append(parameterprint(parameters));
      System.out.println(sb.toString());
  }
  ```
  
  方法调用
  
  ```java
  Class clazz = Bird.class;
  Object bird = clazz.getConstructor(null).newInstance();
  
  Method method = clazz.getDeclaredMethod("fly", int.class);
  method.invoke(bird,5);
  
  // 可变参数方法的调用
  Object varArgs = new String[]{"asd","vvvvv","asdasd"};
  Method varargsMethod = clazz.getDeclaredMethod("setNicknameVarArg", String[].class);
  // varArgs必须是Object类型，否则会报错 wrong number of arguments
  varargsMethod.invoke(bird,varArgs);
  
  System.out.println(((Bird)bird).getNickname());
  ```
  
  ## 数组
  
  简单数组
  
  ```java
  // 新建数组
  Object intArray = Array.newInstance(int.class,10);
  
  // 设置数组元素
  // 设置超过长度，抛出ArrayIndexOutOfBoundsException
  // Array.setInt(intArray,11,13);
  Array.setInt(intArray,0,13);
  
  // 得到数组元素
  System.out.println(Array.getInt(intArray,0));
  ```
  
  多维数组：
  
  ```java
  // 新建多维数组
  Object multiArray = Array.newInstance(int.class,2,3);
  Object row0 = Array.get(multiArray,0);
  Object row1 = Array.get(multiArray,1);
  
  Array.setInt(row0,2,1);
  Array.setInt(row1,1,-1);
  ```
  
  ## 缺点
  
  1. 性能问题。因为反射是在运行时而不是在编译时，所有不会利用到编译优化，同时因为是动态生成，因此，反射操作的效率要比那些非反射操作低得多。
  2. 安全问题。使用反射技术要求程序必须在一个没有安全限制的环境中运行。如果一个程序必须在有安全限制的环境中运行，如Applet，那么这就是个问题了。
  3. 代码问题。由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用－－代码有功能上的错误，降低可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。
  
  
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
